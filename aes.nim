#[
Pseudo Code for AES according to NIST publication
Aes(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
begin
  byte state[4, Nb]

  AddRoundKey(state, w[0, Nb-1])

  for round = 1 step 1 to Nr-1
    SubBytes(state)
    ShiftRows(state)
    MixColumns(stae)
    AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
  end for

  SubBytes(state)
  ShiftRows(state)
  AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])

  out = state
end

Nb : Number of columns (32bit words) Always = 4
Nk : number of 32bit words comprising the cipher key (either 4, 6 or 8)
Nr : Number of rounds which i sa functions of Nk and Nb (10,12 or 14)
]#

const SBox = [
  byte(0x63), 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

# the inverse S- Box transformation
const RBox = [
  byte(0x52), 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]

const Rcon = [uint32(0x8d), 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 ]

const
  Nb = 4
  Nk = 8
  Nr = 14

type
  ## The State consists of four rows of bytes, each containing Nb bytes, where Nb is the block length divided by 32
  State = array[4, array[Nb, byte]]
  CipherBlock* = array[4*Nb, byte]
  Key*         = array[4*Nk, byte]
  KeySchedule = array[(Nr+1), State]


func xtime(x: byte): byte =
  return (x shl 1) xor (((x shr 7) and 1) * 0x1b)

func GFMul(x : byte, y : byte):  byte =
  return (((y and 1) * x) xor
       ((y shr 1 and 1) * xtime(x)) xor
       ((y shr 2 and 1) * xtime(xtime(x))) xor
       ((y shr 3 and 1) * xtime(xtime(xtime(x)))) xor
       ((y shr 4 and 1) * xtime(xtime(xtime(xtime(x)))))); #/* this last call to xtime() can be omitted */

func InitState(input: array[16, byte]): State =
  ## Arranges a block into the 'state'
  var k = 0
  for i in 0..3:
   for j in 0..3:
     result[j][i] = input[k]
     k += 1

func UnwrapState(input : State): array[16, byte] =
  ## Arranges the 'state' back into an array of bytes
  var k = 0
  for i in 0..3:
   for j in 0..3:
     result[k] = input[j][i]
     k += 1

proc MixColumns(state: var State): void =
  ## Transformation in the cipher that takes all of the columns of the of the state and mixes their data to produce new columns
  for i in 0..3:
    var
      a = state[0][i]
      b = state[1][i]
      c = state[2][i]
      d = state[3][i]
    state[0][i] = GFMul(a, 0x02) xor GFMul(b, 0x03) xor c              xor d
    state[1][i] = a              xor GFMul(b, 0x02) xor GFMul(c, 0x03) xor d
    state[2][i] = a              xor b              xor GFMul(c, 0x02) xor GFMul(d, 0x03)
    state[3][i] = GFMul(a, 0x03) xor b              xor c              xor GFMul(d, 0x02)


proc InvMixColumns( state : var State): void =
  ## Transformation in the inverse cipher that is the inverse of MixColumns()
  for i in 0..3:
    var
      a = state[0][i]
      b = state[1][i]
      c = state[2][i]
      d = state[3][i]
    state[0][i] = GFMul(a, 0x0e) xor GFMul(b, 0x0b) xor GFMul(c, 0x0d) xor GFMul(d, 0x09)
    state[1][i] = GFMul(a, 0x09) xor GFMul(b, 0x0e) xor GFMul(c, 0x0b) xor GFMul(d, 0x0d)
    state[2][i] = GFMul(a, 0x0d) xor GFMul(b, 0x09) xor GFMul(c, 0x0e) xor GFMul(d, 0x0b)
    state[3][i] = GFMul(a, 0x0b) xor GFMul(b, 0x0d) xor GFMul(c, 0x09) xor GFMul(d, 0x0e)
  return

func RotWord(input : uint32): uint32 =
  ## Function used in the key expansion routine that takes a four-byte word and performs a cyclic permutation
  var word : array[4, byte]
  var temp = cast[array[4, byte]](input)
  word[0] = temp[1]
  word[1] = temp[2]
  word[2] = temp[3]
  word[3] = temp[0]
  return cast[uint32](word)

func SubWord(input : uint32): uint32 =
  ## Fuction used in the Key expansion routine that takes a four-byte input word and applies an s-box to each of the four bytes to produce an output word
  var word : array[4, byte]
  var temp = cast[array[4, byte]](input)
  word[0] = Sbox[temp[0]]
  word[1] = Sbox[temp[1]]
  word[2] = Sbox[temp[2]]
  word[3] = Sbox[temp[3]]
  return cast[uint32](word)

proc ShiftRows(state: var State): void =
  ## Transformation in the cipher that processes the state by cyclically shifting the last three rows of the state by different offsets
  for i in 1..3:
    let row = state[i]
    for j in 0..3:
      state[i][j] = row[(j+i) %% 4]

proc InvShiftRows(state: var State): void =
  ## Transformation in the inverse cipher that is the inverse of ShiftRows()
  for i in 1..3:
    let row = state[i]
    for j in 0..3:
      state[i][j] = row[(j-i) %% 4]

proc SubBytes(state: var State): void =
  ## Transformation in the cipher that processes the state using a non-linear byte substitution table (s-box) that operates on each of the state bytes independently
  for i in 0..3:
    for j in 0..3:
      state[j][i] = Sbox[state[j][i]]


proc InvSubBytes(state: var State): void =
  ## Transformation in the Inverse Cipher that is the inverse of SubBytes()
  for i in 0..3:
    for j in 0..3:
      state[j][i] = Rbox[state[j][i]]

proc AddRoundKey(state: var State, key : State): void =
  for i in 0..3:
    for j in 0..3:
      state[i][j] = state[i][j] xor key[j][i]


proc KeyExpansion(key : Key, keySchedule : var array[(Nr+1), State]): void =
  ## This function produces Nb(Nr+1) round keys. The round keys are used in each round to en/decrypt the state
  var
    temp : uint32
    build : array[4, byte]
    w : array[Nb*(Nr+1), uint32]
    i = 0
  while(i < Nk):
    build[0] = key[4*i]
    build[1] = key[4*i+1]
    build[2] = key[4*i+2]
    build[3] = key[4*i+3]
    w[i] = cast[uint32](build)
    i += 1

  i = Nk

  while( i < (Nb * (Nr+1)) ):
    temp = w[i-1]
    if (i mod Nk == 0):
      temp = SubWord(RotWord(temp)) xor Rcon[i div Nk]
    elif(Nk > 6 and i mod Nk == 4):
      temp = SubWord(temp)
    w[i] = w[i-Nk] xor temp
    i += 1
  keySchedule = cast[array[(Nr+1), State]](w)
  return

proc Cipher(input : array[4*Nb, byte], output : var array[4*Nb, byte], keySchedule : array[(Nr+1), State]): void =
  var state : State

  state = InitState(input)
  AddRoundKey(state, keySchedule[0])

  for round in 1..Nr-1:
    SubBytes(state)
    ShiftRows(state)
    MixColumns(state)
    AddRoundKey(state, keySchedule[round])

  SubBytes(state)
  ShiftRows(state)
  AddRoundKey(state, keySchedule[Nr])
  output = UnwrapState(state)
  return

proc Decipher(input : array[4*Nb, byte], output : var array[4*Nb, byte], keySchedule : array[(Nr+1), State]): void =
  var state : State
  state = InitState(input)
  AddRoundKey(state, keySchedule[Nr])
  for round in countdown(Nr-1,1):
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, keySchedule[round])
    InvMIxColumns(state)
  InvShiftRows(state)
  InvSubBytes(state)
  AddRoundKey(state, keySchedule[0])
  output = UnwrapState(state)
  return


func Encrypt*(input : CipherBlock, key : Key): CipherBlock =
  var
    keySchedule : KeySchedule
    output : CipherBlock
  KeyExpansion(key, keySchedule)
  Cipher(input, result, keySchedule)

func Decrypt*(input : CipherBlock, key : Key): CipherBlock =
  var
    keySchedule : KeySchedule
    output : CipherBlock
  KeyExpansion(key, keySchedule)
  Decipher(input, result, keySchedule)

when defined(Test):
  import unittest

  suite "AES Test suite":
    ## Tests taken from FIPS standard pg.33
    test "Test XTIME":
      check:
        xtime(0x57) == 0xae

    test "Testing GF Arithmatic":
      check:
        0xfe'u8 == GFMul(0x57'u8, 0x13'u8)

    test "Testing SubBytes":
      var
        testState : State = [[0x19'u8, 0xa0, 0x9a, 0xe9], [0x3d'u8, 0xf4, 0xc6, 0xf8], [0xe3'u8, 0xe2, 0x8d, 0x48], [0xbe'u8, 0x2b, 0x2a, 0x08]]
        answer : State = [[0xd4'u8, 0xe0, 0xb8, 0x1e], [0x27'u8, 0xbf, 0xb4, 0x41], [0x11'u8, 0x98, 0x5d, 0x52], [0xae'u8, 0xf1, 0xe5, 0x30]]
      SubBytes(testState)
      check(testState == answer)

    test "Testing InvSubBytes":
      var
        answer : State = [[0x19'u8, 0xa0, 0x9a, 0xe9], [0x3d'u8, 0xf4, 0xc6, 0xf8], [0xe3'u8, 0xe2, 0x8d, 0x48], [0xbe'u8, 0x2b, 0x2a, 0x08]]
        testState : State = [[0xd4'u8, 0xe0, 0xb8, 0x1e], [0x27'u8, 0xbf, 0xb4, 0x41], [0x11'u8, 0x98, 0x5d, 0x52], [0xae'u8, 0xf1, 0xe5, 0x30]]
      InvSubBytes(testState)
      check(testState == answer)

    test "Testing ShiftRows":
      var
        plaintext : State = [[0xd4'u8, 0xe0, 0xb8, 0x1e], [0x27'u8, 0xbf, 0xb4, 0x41], [0x11'u8, 0x98, 0x5d, 0x52], [0xae'u8, 0xf1, 0xe5, 0x30]]
        answer : State = [[0xd4'u8, 0xe0, 0xb8, 0x1e], [0xbf'u8, 0xb4, 0x41, 0x27], [0x5d'u8, 0x52, 0x11, 0x98], [0x30'u8, 0xae, 0xf1, 0xe5]]
      ShiftRows(plaintext)
      check(plaintext == answer)

    test "Testing InvShiftRows":
      var
        answer : State = [[0xd4'u8, 0xe0, 0xb8, 0x1e], [0x27'u8, 0xbf, 0xb4, 0x41], [0x11'u8, 0x98, 0x5d, 0x52], [0xae'u8, 0xf1, 0xe5, 0x30]]
        plaintext : State = [[0xd4'u8, 0xe0, 0xb8, 0x1e], [0xbf'u8, 0xb4, 0x41, 0x27], [0x5d'u8, 0x52, 0x11, 0x98], [0x30'u8, 0xae, 0xf1, 0xe5]]
      InvShiftRows(plaintext)
      check(plaintext == answer)

    test "Testing MixColumns":
      var
        testState : State = [[0xd4'u8, 0xe0, 0xb8, 0x1e], [0xbf'u8, 0xb4, 0x41, 0x27], [0x5d'u8, 0x52, 0x11, 0x98], [0x30'u8, 0xae, 0xf1, 0xe5]]
        answer : State = [[0x04'u8, 0xe0, 0x48, 0x28], [0x66'u8, 0xcb, 0xf8, 0x06], [0x81'u8, 0x19, 0xd3, 0x26],[0xe5'u8, 0x9a, 0x7a, 0x4c]]
      MixColumns(testState)
      check(testState == answer)

    test "Testing InvMixColumns":
      var
        answer : State = [[0xd4'u8, 0xe0, 0xb8, 0x1e], [0xbf'u8, 0xb4, 0x41, 0x27], [0x5d'u8, 0x52, 0x11, 0x98], [0x30'u8, 0xae, 0xf1, 0xe5]]
        testState : State = [[0x04'u8, 0xe0, 0x48, 0x28], [0x66'u8, 0xcb, 0xf8, 0x06], [0x81'u8, 0x19, 0xd3, 0x26],[0xe5'u8, 0x9a, 0x7a, 0x4c]]
      InvMixColumns(testState)
      check(testState == answer)

    test "Testing AddRoundKey":
      var
        testState : State = [[0x04'u8, 0xe0, 0x48, 0x28], [0x66'u8, 0xcb, 0xf8, 0x06], [0x81'u8, 0x19, 0xd3, 0x26],[0xe5'u8, 0x9a, 0x7a, 0x4c]]
        roundKey : State = [[0xa0'u8, 0xfa, 0xfe,0x17], [0x88'u8, 0x54, 0x2c, 0xb1], [0x23'u8, 0xa3, 0x39, 0x39], [0x2a'u8, 0x6c, 0x76, 0x05]]
        answer  : State = [[0xa4'u8, 0x68, 0x6b, 0x02], [0x9c'u8, 0x9f, 0x5b, 0x6a], [0x7f'u8, 0x35, 0xea, 0x50], [0xf2'u8, 0x2b, 0x43, 0x49]]
      AddRoundKey(testState, roundKey)
      check:
        answer == testState

    test "Testing KeyExpansion":
      var
        testKey : Key = [byte(0x60), 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4]
        answer1 : State = [[0x60'u8, 0x3d, 0xeb, 0x10], [0x15'u8, 0xca, 0x71, 0xbe], [0x2b'u8, 0x73, 0xae, 0xf0], [0x85'u8, 0x7d, 0x77, 0x81]]
        answer2 : State = [[0x1f'u8, 0x35, 0x2c, 0x07], [0x3b'u8, 0x61, 0x08, 0xd7], [0x2d'u8, 0x98, 0x10, 0xa3], [0x09'u8, 0x14, 0xdf, 0xf4]]
        keySchedule : array[Nr+1, State]
      KeyExpansion(testKey, keySchedule)
      check:
        keySchedule[0] == answer1
        keySchedule[1] == answer2


    test "Testing Encryption":
      var
        cipherkey : Key = [byte(0x00), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f]
        plaintext = [byte(0x00), 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff ]
        answer = [byte(0x8e), 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89]
        cipherSchedule : array[(Nr+1), State]
        ciphertext : array[4*Nb, byte]
      KeyExpansion(cipherkey, cipherSchedule)
      Cipher(plaintext, ciphertext, cipherSchedule)
      check(ciphertext == answer)

    test "Testing Decryption":
      var
        cipherkey : Key = [byte(0x00), 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f]
        answer = [byte(0x00), 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff ]
        ciphertext = [byte(0x8e), 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89]
        cipherSchedule : array[(Nr+1), State]
        plaintext : array[4*Nb, byte]
      KeyExpansion(cipherkey, cipherSchedule)
      Decipher(ciphertext, plaintext, cipherSchedule)
      check(plaintext == answer)
